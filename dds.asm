; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
; + AUTHOR      : Guido Trensch, 2012
; + FILE        : dds.asm
; + DESCRIPTION : implements the dirct digital synthesis routines
; +
; +               Implements following functions:
; +
; +               ASM_DDS
; +               ASM_
; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +

; +---------------------------------------------------------------------------------------------------------------+
; |                                                                                                               |
; |  DDS principle                                                                                                |
; |                                                                                                               |
; |                    Wave Tables                                                                                |
; |                    +-----------------+ aligned at 256 byte boundary                                           |
; |                +---|   256 x 8       |                                                                        |
; |                |   +-----------------+                                                                        |
; |                |   +-----------------+                                                                        |
; |                +---|   256 x 8       |  -/--> R/2R network                                                    |
; |                |   +-----------------+   8                                                                    |
; |                .          ...                                                                                 |
; |                |   +-----------------+                                                                        |
; |                +---|   256 x 8       |                                                                        |
; |                |   +-----------------+                                                                        |
; |                |     | | | | | | | |                                                                          |
; |                |     | | | | | | | |                                                                          |
; |  +-----------------+-----------------+-----------------+-----------------+                                    |
; |  | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | phase accumulator 24 bit           |
; |  +-----------------+-----------------+-----------------+-----------------+ (R28, R29, R30)                    |
; |    R31 (table addr)  R30               R29               R28                                                  |
; |                    +-----------------+-----------------+-----------------+                                    |
; |                 +  | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | frequency increment 24 bit         |
; |                    +-----------------+-----------------+-----------------+                                    |
; |                      R26               R25               R24                                                  |
; |                                                                                                               |
; |                                                                                                               |
; |  Calculation of the frequency increment (Fi) for a given frequency (f);                                       |
; |                                                                                                               |
; |        PhASize * DDSCycl                PhASize ... size of the phase accumulator                             |
; |  Fi = ------------------- * f[Hz]       DDSCycl ... the DDS loop machine cycles                               |
; |             CLK[Hz]                     CLK     ... processor clock speed                                     |
; |                                         Fi      ... frequency increment                                       |
; |                                                                                                               |
; |                                                                                                               |
; |  Calculation of the frequency (f) for a given increment (Fi):                                                 |
; |                                                                                                               |
; |                 CLK[Hz]                                                                                       |
; |  f[Hz] = ------------------- * Fi                                                                             |
; |           PhASize * DDSCycl                                                                                   |
; |                                                                                                               |
; |                                                                                                               |
; |  1Hz frequency increment value:                                                                               |
; |                                                                                                               |
; |               2^24 * 13                                                                                       |
; |  Fi[1Hz] = -------------- * 1[Hz] = 10.9051904 (note that cristal is not exact -> adjust the value)           |
; |             20000000[Hz]                                                                                      |
; |                                                                                                               |
; |                                                                                                               |
; |  Calculation of the lowest frequency (Fi=1):                                                                  |
; |                                                                                                               |
; |           20000000[Hz]                                                                                        |
; |  f[Hz] = -------------- * 1 = 0.091[Hz]                                                                       |
; |            2^24 * 13                                                                                          |
; |                                                                                                               |
; |                                                                                                               |
; |  Calculation of the highest frequency at full resolution (Fi=65536):                                          |
; |                                                                                                               |
; |           20000000[Hz]                                                                                        |
; |  f[Hz] = -------------- * 56536 = 6009.61[Hz]                                                                 |
; |            2^24 * 13                                                                                          |
; |                                                                                                               |
; +---------------------------------------------------------------------------------------------------------------+
                    #include    "equates1284P.inc"

                    .EQU        DDSDdr,  DDRC
                    .EQU        DDSPort, PORTC

; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
; +                  W A V E   F O R M   T A B L E S                                                              +
; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
                    .ALIGN 0x8                                    ; last 8 bits of the address forced to be zero, 
                                                                  ; i.e. align to 256 byte page boundary

SINE:               .BYTE 0x80,0x83,0x86,0x89,0x8c,0x8f,0x92,0x95,0x98,0x9c,0x9f,0xa2,0xa5,0xa8,0xab,0xae
                    .BYTE 0xb0,0xb3,0xb6,0xb9,0xbc,0xbf,0xc1,0xc4,0xc7,0xc9,0xcc,0xce,0xd1,0xd3,0xd5,0xd8
                    .BYTE 0xda,0xdc,0xde,0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xed,0xef,0xf0,0xf2,0xf3,0xf5
                    .BYTE 0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfc,0xfd,0xfe,0xfe,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xfe,0xfd,0xfc,0xfc,0xfb,0xfa,0xf9,0xf8,0xf7
                    .BYTE 0xf6,0xf5,0xf3,0xf2,0xf0,0xef,0xed,0xec,0xea,0xe8,0xe6,0xe4,0xe2,0xe0,0xde,0xdc
                    .BYTE 0xda,0xd8,0xd5,0xd3,0xd1,0xce,0xcc,0xc9,0xc7,0xc4,0xc1,0xbf,0xbc,0xb9,0xb6,0xb3
                    .BYTE 0xb0,0xae,0xab,0xa8,0xa5,0xa2,0x9f,0x9c,0x98,0x95,0x92,0x8f,0x8c,0x89,0x86,0x83
                    .BYTE 0x80,0x7c,0x79,0x76,0x73,0x70,0x6d,0x6a,0x67,0x63,0x60,0x5d,0x5a,0x57,0x54,0x51
                    .BYTE 0x4f,0x4c,0x49,0x46,0x43,0x40,0x3e,0x3b,0x38,0x36,0x33,0x31,0x2e,0x2c,0x2a,0x27
                    .BYTE 0x25,0x23,0x21,0x1f,0x1d,0x1b,0x19,0x17,0x15,0x13,0x12,0x10,0x0f,0x0d,0x0c,0x0a
                    .BYTE 0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x03,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x02,0x03,0x03,0x04,0x05,0x06,0x07,0x08
                    .BYTE 0x09,0x0a,0x0c,0x0d,0x0f,0x10,0x12,0x13,0x15,0x17,0x19,0x1b,0x1d,0x1f,0x21,0x23
                    .BYTE 0x25,0x27,0x2a,0x2c,0x2e,0x31,0x33,0x36,0x38,0x3b,0x3e,0x40,0x43,0x46,0x49,0x4c
                    .BYTE 0x4f,0x51,0x54,0x57,0x5a,0x5d,0x60,0x63,0x67,0x6a,0x6d,0x70,0x73,0x76,0x79,0x7c

SQUARE:             .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff

TRIANGLE:           .BYTE 0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e
                    .BYTE 0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e
                    .BYTE 0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e
                    .BYTE 0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e
                    .BYTE 0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e
                    .BYTE 0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe
                    .BYTE 0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde
                    .BYTE 0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe
                    .BYTE 0xff,0xfd,0xfb,0xf9,0xf7,0xf5,0xf3,0xf1,0xef,0xef,0xeb,0xe9,0xe7,0xe5,0xe3,0xe1
                    .BYTE 0xdf,0xdd,0xdb,0xd9,0xd7,0xd5,0xd3,0xd1,0xcf,0xcf,0xcb,0xc9,0xc7,0xc5,0xc3,0xc1
                    .BYTE 0xbf,0xbd,0xbb,0xb9,0xb7,0xb5,0xb3,0xb1,0xaf,0xaf,0xab,0xa9,0xa7,0xa5,0xa3,0xa1
                    .BYTE 0x9f,0x9d,0x9b,0x99,0x97,0x95,0x93,0x91,0x8f,0x8f,0x8b,0x89,0x87,0x85,0x83,0x81
                    .BYTE 0x7f,0x7d,0x7b,0x79,0x77,0x75,0x73,0x71,0x6f,0x6f,0x6b,0x69,0x67,0x65,0x63,0x61
                    .BYTE 0x5f,0x5d,0x5b,0x59,0x57,0x55,0x53,0x51,0x4f,0x4f,0x4b,0x49,0x47,0x45,0x43,0x41
                    .BYTE 0x3f,0x3d,0x3b,0x39,0x37,0x35,0x33,0x31,0x2f,0x2f,0x2b,0x29,0x27,0x25,0x23,0x21
                    .BYTE 0x1f,0x1d,0x1b,0x19,0x17,0x15,0x13,0x11,0x0f,0x0f,0x0b,0x09,0x07,0x05,0x03,0x01

SAWTOOTH:           .BYTE 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
                    .BYTE 0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f
                    .BYTE 0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f
                    .BYTE 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f
                    .BYTE 0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f
                    .BYTE 0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f
                    .BYTE 0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f
                    .BYTE 0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f
                    .BYTE 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f
                    .BYTE 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f
                    .BYTE 0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf
                    .BYTE 0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf
                    .BYTE 0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf
                    .BYTE 0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf
                    .BYTE 0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef
                    .BYTE 0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff

PULS:               .BYTE 0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

;                        STEP FUNCTION
;
;         xFF            |         xxx
;         xF0            |         | |
;         xE0            |       xxx xxx
;         xD0            |       |     |
;         xC0            |     xxx     xxx
;         xB0            |     |         |
;         xA0            |   xxx         xxx
;         x90            |   |             |
;         x80            | xxx             xxx
;         x70            |                   |
;         x60            |                   xxx         xxx
;         x50            |                     |         |
;         x40            |                     xxx     xxx
;         x30            |                       |     |
;         x20            |                       xxx xxx
;         x10            |                         | |
;         x00            |                         xxx
;                        ---------------------------------------
;                           0 1 2 3 4 5 6 7 8 9 A B C D E F

STEP:               .BYTE 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
                    .BYTE 0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0
                    .BYTE 0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0
                    .BYTE 0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0,0xe0
                    .BYTE 0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0
                    .BYTE 0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0
                    .BYTE 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
                    .BYTE 0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60
                    .BYTE 0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40
                    .BYTE 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
                    .BYTE 0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40
                    .BYTE 0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60

;                        RAMP FUNCTION
;
;         xFF            |                         xxxxxxx
;         xF0            |                         |     |
;         xE0            |                         |     |
;         xD0            |                         |     |
;         xC0            |                   xxxxxxx     |
;         xB0            |                   |           |
;         xA0            |                   |           |
;         x90            |                   |           |
;         x80            |             xxxxxxx           |
;         x70            |             |                 |
;         x60            |             |                 |
;         x50            |             |                 |
;         x40            |       xxxxxxx                 |
;         x30            |       |                       |
;         x20            |       |                       |
;         x10            |       |                       |
;         x00            | xxxxxxx                       xxx
;                        ---------------------------------------
;                           0 1 2 3 4 5 6 7 8 9 A B C D E F

RAMP:               .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                    .BYTE 0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40
                    .BYTE 0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40
                    .BYTE 0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40
                    .BYTE 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
                    .BYTE 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
                    .BYTE 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
                    .BYTE 0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0
                    .BYTE 0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0
                    .BYTE 0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
                    .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

; TEMPLATE:         .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;                   .BYTE 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
; +                  G L O B A L   V A R I A B L E S                                                              +
; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
                    .EXTERN     glob_ddsControl 
                    .EXTERN     glob_ddsFrequency
                    .EXTERN     glob_ddsWavrForm

; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
; +                  E X T E R N A L   F U N C T I O N S                                                          +
; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
; +                  ASM_Init_DDS                                                                                 +
; +                                                                                                               +
; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
                    .GLOBAL     ASM_Init_DDS
                    .FUNC       ASM_Init_DDS
ASM_Init_DDS:        PUSH       R16                               ; save registers

;                    + + + INITIALIZE DDS PORT + + +

                     SER        R16                               ; R16:= x'FF'
                     OUT        DDSDdr,R16                        ; configure DDS port for output
                     CLR        R16                               ; R16:= x'00'
                     OUT        DDSPort,R16                       ; all lines 0

                     POP        R16                               ; restore register
                     RET
                    .ENDFUNC

; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
; +                  ASM_Run_DDS                                                                                  +
; +                                                                                                               +
; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
                    .GLOBAL     ASM_Run_DDS
                    .FUNC       ASM_Run_DDS
ASM_Run_DDS:         PUSH       R0                                ; save register
                     PUSH       R16
                     PUSH       R24
                     PUSH       R25
                     PUSH       R26
                     PUSH       R28
                     PUSH       R29
                     PUSH       R30
                     PUSH       R31

;                    + + + SELECT WAVE FORM TABLE + + +

                     LDS        R16,glob_ddsWaveForm
                     LDI        R30,lo8(DDSWaveForm_BTAB)
                     LDI        R31,hi8(DDSWaveForm_BTAB)
                     LSR        R31                               ; address in R31:R30 is divided by two   0 -> R31 -> Carry
                     ROR        R30                               ;                                        Carry -> R30 ->
                     ADD        R30,R16                           ; 16 bit address offset addition, low byte
                     CLR        R16                               ; clear register
                     ADC        R31,R16                           ; add high byte which is just the carry flag
                     IJMP                                         ; -->> indirect jump pointed to by R31:R30(Z)into BTAB

                                                                  ; branch table                function_code
DDSWaveForm_BTAB:    RJMP       DDS_Sine                          ;                 Sine     =   0
                     RJMP       DDS_Square                        ;                 Square   =   1
                     RJMP       DDS_Triangle                      ;                 Triangle =   2
                     RJMP       DDS_Sawtooth                      ;                 SawTooth =   3
                     RJMP       DDS_Puls                          ;                 Puls     =   4
                     RJMP       DDS_Step                          ;                 Step     =   5
                     RJMP       DDS_Ramp                          ;                 Ramp     =   6

DDS_Sine:            LDI        R31,hi8(SINE)
                     RJMP       DDS_Continue

DDS_Square:          LDI        R31,hi8(SQUARE)
                     RJMP       DDS_Continue

DDS_Triangle:        LDI        R31,hi8(TRIANGLE)
                     RJMP       DDS_Continue

DDS_Sawtooth:        LDI        R31,hi8(SAWTOOTH)
                     RJMP       DDS_Continue

DDS_Puls:            LDI        R31,hi8(PULS)
                     RJMP       DDS_Continue

DDS_Step:            LDI        R31,hi8(STEP)
                     RJMP       DDS_Continue

DDS_Ramp:            LDI        R31,hi8(RAMP)
;                    RJMP       DDS_Continue


;                    + + + CLEAR PHASE ACCUMULATOR + + +

DDS_Continue:        CLR        R28
                     CLR        R29
                     CLR        R30

;                    + + + SET FREQUENCY INCREMENT + + +

                     LDS        R24,glob_ddsFrequency
                     LDS        R25,glob_ddsFrequency + 1
                     LDS        R26,glob_ddsFrequency + 2

;                    + + + DDS LOOP + + +

DDS_Loop:            LDS        R16,glob_ddsControl               ; 2 cycles
                     TST        R16                               ; 1 cycle
                     BREQ       DDS_Exit                          ; 1 cycle, if false
                     ADD        R28,R24                           ; 1 cycle
                     ADC        R29,R25                           ; 1 cycle
                     ADC        R30,R26                           ; 1 cycle
                     LPM                                          ; 3 cycles
                     OUT        DDSPort,R0                        ; 1 cycle
                     RJMP       DDS_Loop;                         ; 2 cycles
                                                                  ; SUM: 13 cycles

DDS_Exit:            CLR        R0                                ; output x00 when DDS stops
                     OUT        DDSPort,R0

                     POP        R31                               ; restore register
                     POP        R30
                     POP        R29
                     POP        R28
                     POP        R26
                     POP        R25
                     POP        R24
                     POP        R16
                     POP        R0
                     RET
                    .ENDFUNC

                    .END
